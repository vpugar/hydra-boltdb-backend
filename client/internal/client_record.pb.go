// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client_record.proto

/*
	Package internal is a generated protocol buffer package.

	It is generated from these files:
		client_record.proto

	It has these top-level messages:
		ClientRecord
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientRecord struct {
	ID                string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Secret            string   `protobuf:"bytes,3,opt,name=Secret,proto3" json:"Secret,omitempty"`
	RedirectURIs      []string `protobuf:"bytes,4,rep,name=RedirectURIs" json:"RedirectURIs,omitempty"`
	GrantTypes        []string `protobuf:"bytes,5,rep,name=GrantTypes" json:"GrantTypes,omitempty"`
	ResponseTypes     []string `protobuf:"bytes,6,rep,name=ResponseTypes" json:"ResponseTypes,omitempty"`
	Scope             string   `protobuf:"bytes,7,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Owner             string   `protobuf:"bytes,8,opt,name=Owner,proto3" json:"Owner,omitempty"`
	PolicyURI         string   `protobuf:"bytes,9,opt,name=PolicyURI,proto3" json:"PolicyURI,omitempty"`
	TermsOfServiceURI string   `protobuf:"bytes,10,opt,name=TermsOfServiceURI,proto3" json:"TermsOfServiceURI,omitempty"`
	ClientURI         string   `protobuf:"bytes,11,opt,name=ClientURI,proto3" json:"ClientURI,omitempty"`
	LogoURI           string   `protobuf:"bytes,12,opt,name=LogoURI,proto3" json:"LogoURI,omitempty"`
	Contacts          []string `protobuf:"bytes,13,rep,name=Contacts" json:"Contacts,omitempty"`
	Public            bool     `protobuf:"varint,14,opt,name=Public,proto3" json:"Public,omitempty"`
}

func (m *ClientRecord) Reset()                    { *m = ClientRecord{} }
func (m *ClientRecord) String() string            { return proto.CompactTextString(m) }
func (*ClientRecord) ProtoMessage()               {}
func (*ClientRecord) Descriptor() ([]byte, []int) { return fileDescriptorClientRecord, []int{0} }

func (m *ClientRecord) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ClientRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientRecord) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *ClientRecord) GetRedirectURIs() []string {
	if m != nil {
		return m.RedirectURIs
	}
	return nil
}

func (m *ClientRecord) GetGrantTypes() []string {
	if m != nil {
		return m.GrantTypes
	}
	return nil
}

func (m *ClientRecord) GetResponseTypes() []string {
	if m != nil {
		return m.ResponseTypes
	}
	return nil
}

func (m *ClientRecord) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ClientRecord) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ClientRecord) GetPolicyURI() string {
	if m != nil {
		return m.PolicyURI
	}
	return ""
}

func (m *ClientRecord) GetTermsOfServiceURI() string {
	if m != nil {
		return m.TermsOfServiceURI
	}
	return ""
}

func (m *ClientRecord) GetClientURI() string {
	if m != nil {
		return m.ClientURI
	}
	return ""
}

func (m *ClientRecord) GetLogoURI() string {
	if m != nil {
		return m.LogoURI
	}
	return ""
}

func (m *ClientRecord) GetContacts() []string {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ClientRecord) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func init() {
	proto.RegisterType((*ClientRecord)(nil), "internal.ClientRecord")
}
func (m *ClientRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.RedirectURIs) > 0 {
		for _, s := range m.RedirectURIs {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GrantTypes) > 0 {
		for _, s := range m.GrantTypes {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ResponseTypes) > 0 {
		for _, s := range m.ResponseTypes {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.PolicyURI) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.PolicyURI)))
		i += copy(dAtA[i:], m.PolicyURI)
	}
	if len(m.TermsOfServiceURI) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.TermsOfServiceURI)))
		i += copy(dAtA[i:], m.TermsOfServiceURI)
	}
	if len(m.ClientURI) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.ClientURI)))
		i += copy(dAtA[i:], m.ClientURI)
	}
	if len(m.LogoURI) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintClientRecord(dAtA, i, uint64(len(m.LogoURI)))
		i += copy(dAtA[i:], m.LogoURI)
	}
	if len(m.Contacts) > 0 {
		for _, s := range m.Contacts {
			dAtA[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Public {
		dAtA[i] = 0x70
		i++
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64ClientRecord(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ClientRecord(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintClientRecord(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClientRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	if len(m.RedirectURIs) > 0 {
		for _, s := range m.RedirectURIs {
			l = len(s)
			n += 1 + l + sovClientRecord(uint64(l))
		}
	}
	if len(m.GrantTypes) > 0 {
		for _, s := range m.GrantTypes {
			l = len(s)
			n += 1 + l + sovClientRecord(uint64(l))
		}
	}
	if len(m.ResponseTypes) > 0 {
		for _, s := range m.ResponseTypes {
			l = len(s)
			n += 1 + l + sovClientRecord(uint64(l))
		}
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.PolicyURI)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.TermsOfServiceURI)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.ClientURI)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	l = len(m.LogoURI)
	if l > 0 {
		n += 1 + l + sovClientRecord(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, s := range m.Contacts {
			l = len(s)
			n += 1 + l + sovClientRecord(uint64(l))
		}
	}
	if m.Public {
		n += 2
	}
	return n
}

func sovClientRecord(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClientRecord(x uint64) (n int) {
	return sovClientRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURIs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURIs = append(m.RedirectURIs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantTypes = append(m.GrantTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseTypes = append(m.ResponseTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermsOfServiceURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TermsOfServiceURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClientRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClientRecord
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClientRecord
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClientRecord(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClientRecord = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientRecord   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("client_record.proto", fileDescriptorClientRecord) }

var fileDescriptorClientRecord = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0xff, 0x26, 0x63, 0x5b, 0x74, 0x14, 0x59, 0x44, 0x42, 0x29, 0x1e, 0x7a, 0x10,
	0x2f, 0xbe, 0x81, 0x2d, 0x48, 0x40, 0x6c, 0xd9, 0xb6, 0x67, 0x49, 0xb7, 0xa3, 0x04, 0xd2, 0xdd,
	0xb0, 0x59, 0x95, 0xbe, 0x49, 0x1f, 0xc9, 0xa3, 0x8f, 0x20, 0xf5, 0x45, 0x24, 0x93, 0x5a, 0x2d,
	0xde, 0xf6, 0xfb, 0x7d, 0x3f, 0x86, 0xdd, 0x59, 0x38, 0x51, 0x69, 0x42, 0xda, 0x3d, 0x5a, 0x52,
	0xc6, 0x2e, 0xae, 0x33, 0x6b, 0x9c, 0x41, 0x3f, 0xd1, 0x8e, 0xac, 0x8e, 0xd3, 0xde, 0xba, 0x0a,
	0xad, 0x01, 0x1b, 0x92, 0x05, 0xec, 0x40, 0x25, 0x1a, 0x0a, 0xaf, 0xeb, 0xf5, 0x03, 0x59, 0x89,
	0x86, 0x88, 0x50, 0x7b, 0x88, 0x97, 0x24, 0x2a, 0x4c, 0xf8, 0x8c, 0x67, 0xd0, 0x98, 0x90, 0xb2,
	0xe4, 0x44, 0x95, 0xe9, 0x36, 0x61, 0x0f, 0x5a, 0x92, 0x16, 0x89, 0x25, 0xe5, 0x66, 0x32, 0xca,
	0x45, 0xad, 0x5b, 0xed, 0x07, 0x72, 0x8f, 0x61, 0x08, 0x70, 0x67, 0x63, 0xed, 0xa6, 0xab, 0x8c,
	0x72, 0x51, 0x67, 0xe3, 0x0f, 0xc1, 0x4b, 0x68, 0x4b, 0xca, 0x33, 0xa3, 0x73, 0x2a, 0x95, 0x06,
	0x2b, 0xfb, 0x10, 0x4f, 0xa1, 0x3e, 0x51, 0x26, 0x23, 0xd1, 0xe4, 0x0b, 0x94, 0xa1, 0xa0, 0xa3,
	0x37, 0x4d, 0x56, 0xf8, 0x25, 0xe5, 0x80, 0x17, 0x10, 0x8c, 0x4d, 0x9a, 0xa8, 0xd5, 0x4c, 0x46,
	0x22, 0xe0, 0xe6, 0x17, 0xe0, 0x15, 0x1c, 0x4f, 0xc9, 0x2e, 0xf3, 0xd1, 0xd3, 0x84, 0xec, 0x6b,
	0xa2, 0xa8, 0xb0, 0x80, 0xad, 0xff, 0x45, 0x31, 0xab, 0xdc, 0x56, 0x61, 0x1d, 0x96, 0xb3, 0x76,
	0x00, 0x05, 0x34, 0xef, 0xcd, 0xb3, 0x29, 0xba, 0x16, 0x77, 0x3f, 0x11, 0xcf, 0xc1, 0x1f, 0x18,
	0xed, 0x62, 0xe5, 0x72, 0xd1, 0xe6, 0x07, 0xed, 0x72, 0xb1, 0xcd, 0xf1, 0xcb, 0x3c, 0x4d, 0x94,
	0xe8, 0x74, 0xbd, 0xbe, 0x2f, 0xb7, 0xe9, 0xf6, 0xe8, 0x7d, 0x13, 0x7a, 0x1f, 0x9b, 0xd0, 0xfb,
	0xdc, 0x84, 0xde, 0xfa, 0x2b, 0x3c, 0x98, 0x37, 0xf8, 0xf7, 0x6e, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x19, 0x07, 0xa4, 0xc5, 0xd4, 0x01, 0x00, 0x00,
}
