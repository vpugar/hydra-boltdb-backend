// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oauth2_record.proto

/*
	Package internal is a generated protocol buffer package.

	It is generated from these files:
		oauth2_record.proto

	It has these top-level messages:
		Val
		Oauth2Record
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Val struct {
	Val []string `protobuf:"bytes,1,rep,name=val" json:"val,omitempty"`
}

func (m *Val) Reset()                    { *m = Val{} }
func (m *Val) String() string            { return proto.CompactTextString(m) }
func (*Val) ProtoMessage()               {}
func (*Val) Descriptor() ([]byte, []int) { return fileDescriptorOauth2Record, []int{0} }

func (m *Val) GetVal() []string {
	if m != nil {
		return m.Val
	}
	return nil
}

type Oauth2Record struct {
	Signature     string          `protobuf:"bytes,1,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Request       string          `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	RequestedAt   int64           `protobuf:"varint,3,opt,name=RequestedAt,proto3" json:"RequestedAt,omitempty"`
	Client        string          `protobuf:"bytes,4,opt,name=Client,proto3" json:"Client,omitempty"`
	Scopes        []string        `protobuf:"bytes,5,rep,name=Scopes" json:"Scopes,omitempty"`
	GrantedScopes []string        `protobuf:"bytes,6,rep,name=GrantedScopes" json:"GrantedScopes,omitempty"`
	Form          map[string]*Val `protobuf:"bytes,7,rep,name=Form" json:"Form,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Session       []byte          `protobuf:"bytes,8,opt,name=Session,proto3" json:"Session,omitempty"`
}

func (m *Oauth2Record) Reset()                    { *m = Oauth2Record{} }
func (m *Oauth2Record) String() string            { return proto.CompactTextString(m) }
func (*Oauth2Record) ProtoMessage()               {}
func (*Oauth2Record) Descriptor() ([]byte, []int) { return fileDescriptorOauth2Record, []int{1} }

func (m *Oauth2Record) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Oauth2Record) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *Oauth2Record) GetRequestedAt() int64 {
	if m != nil {
		return m.RequestedAt
	}
	return 0
}

func (m *Oauth2Record) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *Oauth2Record) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *Oauth2Record) GetGrantedScopes() []string {
	if m != nil {
		return m.GrantedScopes
	}
	return nil
}

func (m *Oauth2Record) GetForm() map[string]*Val {
	if m != nil {
		return m.Form
	}
	return nil
}

func (m *Oauth2Record) GetSession() []byte {
	if m != nil {
		return m.Session
	}
	return nil
}

func init() {
	proto.RegisterType((*Val)(nil), "internal.Val")
	proto.RegisterType((*Oauth2Record)(nil), "internal.Oauth2Record")
}
func (m *Val) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Val) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Val) > 0 {
		for _, s := range m.Val {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Oauth2Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Oauth2Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth2Record(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOauth2Record(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if m.RequestedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOauth2Record(dAtA, i, uint64(m.RequestedAt))
	}
	if len(m.Client) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOauth2Record(dAtA, i, uint64(len(m.Client)))
		i += copy(dAtA[i:], m.Client)
	}
	if len(m.Scopes) > 0 {
		for _, s := range m.Scopes {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GrantedScopes) > 0 {
		for _, s := range m.GrantedScopes {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Form) > 0 {
		for k, _ := range m.Form {
			dAtA[i] = 0x3a
			i++
			v := m.Form[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovOauth2Record(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovOauth2Record(uint64(len(k))) + msgSize
			i = encodeVarintOauth2Record(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOauth2Record(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintOauth2Record(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.Session) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOauth2Record(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	return i, nil
}

func encodeFixed64Oauth2Record(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Oauth2Record(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOauth2Record(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Val) Size() (n int) {
	var l int
	_ = l
	if len(m.Val) > 0 {
		for _, s := range m.Val {
			l = len(s)
			n += 1 + l + sovOauth2Record(uint64(l))
		}
	}
	return n
}

func (m *Oauth2Record) Size() (n int) {
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovOauth2Record(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovOauth2Record(uint64(l))
	}
	if m.RequestedAt != 0 {
		n += 1 + sovOauth2Record(uint64(m.RequestedAt))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovOauth2Record(uint64(l))
	}
	if len(m.Scopes) > 0 {
		for _, s := range m.Scopes {
			l = len(s)
			n += 1 + l + sovOauth2Record(uint64(l))
		}
	}
	if len(m.GrantedScopes) > 0 {
		for _, s := range m.GrantedScopes {
			l = len(s)
			n += 1 + l + sovOauth2Record(uint64(l))
		}
	}
	if len(m.Form) > 0 {
		for k, v := range m.Form {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOauth2Record(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOauth2Record(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOauth2Record(uint64(mapEntrySize))
		}
	}
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovOauth2Record(uint64(l))
	}
	return n
}

func sovOauth2Record(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOauth2Record(x uint64) (n int) {
	return sovOauth2Record(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Val) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth2Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Val: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Val: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth2Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth2Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Oauth2Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth2Record
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oauth2Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oauth2Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedAt", wireType)
			}
			m.RequestedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scopes = append(m.Scopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantedScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantedScopes = append(m.GrantedScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Form == nil {
				m.Form = make(map[string]*Val)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOauth2Record
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOauth2Record
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthOauth2Record
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthOauth2Record
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Val{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Form[mapkey] = mapvalue
			} else {
				var mapvalue *Val
				m.Form[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOauth2Record
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = append(m.Session[:0], dAtA[iNdEx:postIndex]...)
			if m.Session == nil {
				m.Session = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth2Record(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth2Record
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOauth2Record(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOauth2Record
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOauth2Record
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOauth2Record
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOauth2Record
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOauth2Record(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOauth2Record = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOauth2Record   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("oauth2_record.proto", fileDescriptorOauth2Record) }

var fileDescriptorOauth2Record = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0x4d, 0x4b, 0xfb, 0x30,
	0x18, 0xff, 0x67, 0xdd, 0x5b, 0x9f, 0x6d, 0x30, 0xf2, 0x07, 0x0d, 0x22, 0x25, 0x4c, 0x0f, 0x3d,
	0xf5, 0x30, 0x3d, 0x88, 0x37, 0x15, 0xe7, 0x51, 0xc8, 0x60, 0x57, 0x89, 0xdb, 0x83, 0x16, 0x63,
	0x32, 0xd3, 0x74, 0xb0, 0x6f, 0xe2, 0x47, 0xf2, 0xe8, 0xc9, 0xb3, 0xcc, 0x2f, 0x22, 0x89, 0xad,
	0x9b, 0xb7, 0xdf, 0x2b, 0xed, 0xef, 0x09, 0xfc, 0x37, 0xb2, 0x74, 0x8f, 0xe3, 0x3b, 0x8b, 0x73,
	0x63, 0x17, 0xd9, 0xd2, 0x1a, 0x67, 0x68, 0x37, 0xd7, 0x0e, 0xad, 0x96, 0x6a, 0xb4, 0x0f, 0xd1,
	0x4c, 0x2a, 0x3a, 0x84, 0x68, 0x25, 0x15, 0x23, 0x3c, 0x4a, 0x63, 0xe1, 0xe1, 0xe8, 0xa3, 0x01,
	0xfd, 0xdb, 0x50, 0x15, 0xa1, 0x49, 0x0f, 0x21, 0x9e, 0xe6, 0x0f, 0x5a, 0xba, 0xd2, 0x22, 0x23,
	0x9c, 0xa4, 0xb1, 0xd8, 0x0a, 0x94, 0x41, 0x47, 0xe0, 0x4b, 0x89, 0x85, 0x63, 0x8d, 0xe0, 0xd5,
	0x94, 0x72, 0xe8, 0x55, 0x10, 0x17, 0x17, 0x8e, 0x45, 0x9c, 0xa4, 0x91, 0xd8, 0x95, 0xe8, 0x1e,
	0xb4, 0xaf, 0x54, 0x8e, 0xda, 0xb1, 0x66, 0xa8, 0x56, 0xcc, 0xeb, 0xd3, 0xb9, 0x59, 0x62, 0xc1,
	0x5a, 0xe1, 0xbf, 0x2a, 0x46, 0x8f, 0x61, 0x70, 0x63, 0xa5, 0x76, 0xb8, 0xa8, 0xec, 0x76, 0xb0,
	0xff, 0x8a, 0xf4, 0x14, 0x9a, 0x13, 0x63, 0x9f, 0x59, 0x87, 0x47, 0x69, 0x6f, 0xcc, 0xb3, 0x7a,
	0x72, 0xb6, 0xbb, 0x2a, 0xf3, 0x91, 0x6b, 0xed, 0xec, 0x5a, 0x84, 0xb4, 0xdf, 0x31, 0xc5, 0xa2,
	0xc8, 0x8d, 0x66, 0x5d, 0x4e, 0xd2, 0xbe, 0xa8, 0xe9, 0xc1, 0x04, 0xe2, 0xdf, 0xb0, 0xbf, 0xd7,
	0x13, 0xae, 0xab, 0x33, 0x78, 0x48, 0x8f, 0xa0, 0xb5, 0x92, 0xaa, 0xc4, 0x30, 0xbf, 0x37, 0x1e,
	0x6c, 0xbf, 0x37, 0x93, 0x4a, 0xfc, 0x78, 0xe7, 0x8d, 0x33, 0x72, 0x39, 0x7c, 0xdb, 0x24, 0xe4,
	0x7d, 0x93, 0x90, 0xcf, 0x4d, 0x42, 0x5e, 0xbf, 0x92, 0x7f, 0xf7, 0xed, 0xf0, 0x28, 0x27, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x21, 0x35, 0x5f, 0xab, 0x01, 0x00, 0x00,
}
