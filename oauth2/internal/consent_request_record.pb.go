// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consent_request_record.proto

/*
	Package internal is a generated protocol buffer package.

	It is generated from these files:
		consent_request_record.proto

	It has these top-level messages:
		ConsentRequestRecord
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConsentRequestRecord struct {
	ID               string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RequestedScopes  []string `protobuf:"bytes,2,rep,name=RequestedScopes" json:"RequestedScopes,omitempty"`
	ClientID         string   `protobuf:"bytes,3,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExpiresAt        int64    `protobuf:"varint,4,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	RedirectURL      string   `protobuf:"bytes,5,opt,name=RedirectURL,proto3" json:"RedirectURL,omitempty"`
	CSRF             string   `protobuf:"bytes,6,opt,name=CSRF,proto3" json:"CSRF,omitempty"`
	GrantedScopes    []string `protobuf:"bytes,7,rep,name=GrantedScopes" json:"GrantedScopes,omitempty"`
	Subject          string   `protobuf:"bytes,8,opt,name=Subject,proto3" json:"Subject,omitempty"`
	AccessTokenExtra []byte   `protobuf:"bytes,9,opt,name=AccessTokenExtra,proto3" json:"AccessTokenExtra,omitempty"`
	IDTokenExtra     []byte   `protobuf:"bytes,10,opt,name=IDTokenExtra,proto3" json:"IDTokenExtra,omitempty"`
	Consent          string   `protobuf:"bytes,11,opt,name=Consent,proto3" json:"Consent,omitempty"`
	DenyReason       string   `protobuf:"bytes,12,opt,name=DenyReason,proto3" json:"DenyReason,omitempty"`
}

func (m *ConsentRequestRecord) Reset()         { *m = ConsentRequestRecord{} }
func (m *ConsentRequestRecord) String() string { return proto.CompactTextString(m) }
func (*ConsentRequestRecord) ProtoMessage()    {}
func (*ConsentRequestRecord) Descriptor() ([]byte, []int) {
	return fileDescriptorConsentRequestRecord, []int{0}
}

func (m *ConsentRequestRecord) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ConsentRequestRecord) GetRequestedScopes() []string {
	if m != nil {
		return m.RequestedScopes
	}
	return nil
}

func (m *ConsentRequestRecord) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *ConsentRequestRecord) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *ConsentRequestRecord) GetRedirectURL() string {
	if m != nil {
		return m.RedirectURL
	}
	return ""
}

func (m *ConsentRequestRecord) GetCSRF() string {
	if m != nil {
		return m.CSRF
	}
	return ""
}

func (m *ConsentRequestRecord) GetGrantedScopes() []string {
	if m != nil {
		return m.GrantedScopes
	}
	return nil
}

func (m *ConsentRequestRecord) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ConsentRequestRecord) GetAccessTokenExtra() []byte {
	if m != nil {
		return m.AccessTokenExtra
	}
	return nil
}

func (m *ConsentRequestRecord) GetIDTokenExtra() []byte {
	if m != nil {
		return m.IDTokenExtra
	}
	return nil
}

func (m *ConsentRequestRecord) GetConsent() string {
	if m != nil {
		return m.Consent
	}
	return ""
}

func (m *ConsentRequestRecord) GetDenyReason() string {
	if m != nil {
		return m.DenyReason
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsentRequestRecord)(nil), "internal.ConsentRequestRecord")
}
func (m *ConsentRequestRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsentRequestRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.RequestedScopes) > 0 {
		for _, s := range m.RequestedScopes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.ClientID)))
		i += copy(dAtA[i:], m.ClientID)
	}
	if m.ExpiresAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(m.ExpiresAt))
	}
	if len(m.RedirectURL) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.RedirectURL)))
		i += copy(dAtA[i:], m.RedirectURL)
	}
	if len(m.CSRF) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.CSRF)))
		i += copy(dAtA[i:], m.CSRF)
	}
	if len(m.GrantedScopes) > 0 {
		for _, s := range m.GrantedScopes {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subject) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.AccessTokenExtra) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.AccessTokenExtra)))
		i += copy(dAtA[i:], m.AccessTokenExtra)
	}
	if len(m.IDTokenExtra) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.IDTokenExtra)))
		i += copy(dAtA[i:], m.IDTokenExtra)
	}
	if len(m.Consent) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.Consent)))
		i += copy(dAtA[i:], m.Consent)
	}
	if len(m.DenyReason) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintConsentRequestRecord(dAtA, i, uint64(len(m.DenyReason)))
		i += copy(dAtA[i:], m.DenyReason)
	}
	return i, nil
}

func encodeFixed64ConsentRequestRecord(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ConsentRequestRecord(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConsentRequestRecord(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConsentRequestRecord) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	if len(m.RequestedScopes) > 0 {
		for _, s := range m.RequestedScopes {
			l = len(s)
			n += 1 + l + sovConsentRequestRecord(uint64(l))
		}
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovConsentRequestRecord(uint64(m.ExpiresAt))
	}
	l = len(m.RedirectURL)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	l = len(m.CSRF)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	if len(m.GrantedScopes) > 0 {
		for _, s := range m.GrantedScopes {
			l = len(s)
			n += 1 + l + sovConsentRequestRecord(uint64(l))
		}
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	l = len(m.AccessTokenExtra)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	l = len(m.IDTokenExtra)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	l = len(m.Consent)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	l = len(m.DenyReason)
	if l > 0 {
		n += 1 + l + sovConsentRequestRecord(uint64(l))
	}
	return n
}

func sovConsentRequestRecord(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConsentRequestRecord(x uint64) (n int) {
	return sovConsentRequestRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsentRequestRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsentRequestRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsentRequestRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsentRequestRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedScopes = append(m.RequestedScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSRF", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CSRF = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantedScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantedScopes = append(m.GrantedScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTokenExtra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessTokenExtra = append(m.AccessTokenExtra[:0], dAtA[iNdEx:postIndex]...)
			if m.AccessTokenExtra == nil {
				m.AccessTokenExtra = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDTokenExtra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDTokenExtra = append(m.IDTokenExtra[:0], dAtA[iNdEx:postIndex]...)
			if m.IDTokenExtra == nil {
				m.IDTokenExtra = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenyReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsentRequestRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsentRequestRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsentRequestRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsentRequestRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsentRequestRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConsentRequestRecord
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConsentRequestRecord
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConsentRequestRecord(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConsentRequestRecord = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsentRequestRecord   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("consent_request_record.proto", fileDescriptorConsentRequestRecord) }

var fileDescriptorConsentRequestRecord = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4e, 0x32, 0x31,
	0x10, 0xc7, 0xbf, 0xb2, 0x7c, 0xc0, 0x0e, 0xa8, 0x64, 0xe2, 0xa1, 0x31, 0x64, 0xb3, 0x21, 0x1e,
	0x36, 0x1e, 0xbc, 0xf8, 0x04, 0xc8, 0xa2, 0xd9, 0xc4, 0x53, 0xd1, 0xb3, 0x59, 0xca, 0x1c, 0x56,
	0x49, 0x8b, 0x6d, 0x49, 0xf0, 0x15, 0x7c, 0x02, 0x1f, 0xc9, 0xa3, 0x8f, 0x60, 0xf0, 0x45, 0x0c,
	0xdd, 0x55, 0x16, 0x3d, 0xb5, 0xf3, 0x9b, 0xdf, 0x3f, 0x33, 0x69, 0x61, 0x20, 0xb5, 0xb2, 0xa4,
	0xdc, 0xbd, 0xa1, 0xa7, 0x15, 0xd9, 0xed, 0x29, 0xb5, 0x99, 0x9f, 0x2f, 0x8d, 0x76, 0x1a, 0x3b,
	0x85, 0x72, 0x64, 0x54, 0xbe, 0x18, 0xbe, 0x04, 0x70, 0x3c, 0x2e, 0x55, 0x51, 0x9a, 0xc2, 0x8b,
	0x78, 0x08, 0x8d, 0x2c, 0xe5, 0x2c, 0x66, 0x49, 0x28, 0x1a, 0x59, 0x8a, 0x09, 0x1c, 0x55, 0x02,
	0xcd, 0xa7, 0x52, 0x2f, 0xc9, 0xf2, 0x46, 0x1c, 0x24, 0xa1, 0xf8, 0x8d, 0xf1, 0x04, 0x3a, 0xe3,
	0x45, 0x41, 0xca, 0x65, 0x29, 0x0f, 0x7c, 0xfe, 0xa7, 0xc6, 0x01, 0x84, 0x93, 0xf5, 0xb2, 0x30,
	0x64, 0x47, 0x8e, 0x37, 0x63, 0x96, 0x04, 0x62, 0x07, 0x30, 0x86, 0xae, 0xa0, 0x79, 0x61, 0x48,
	0xba, 0x3b, 0x71, 0xc3, 0xff, 0xfb, 0x70, 0x1d, 0x21, 0x42, 0x73, 0x3c, 0x15, 0x57, 0xbc, 0xe5,
	0x5b, 0xfe, 0x8e, 0xa7, 0x70, 0x70, 0x6d, 0x72, 0xb5, 0xdb, 0xab, 0xed, 0xf7, 0xda, 0x87, 0xc8,
	0xa1, 0x3d, 0x5d, 0xcd, 0x1e, 0x48, 0x3a, 0xde, 0xf1, 0xe1, 0xef, 0x12, 0xcf, 0xa0, 0x3f, 0x92,
	0x92, 0xac, 0xbd, 0xd5, 0x8f, 0xa4, 0x26, 0x6b, 0x67, 0x72, 0x1e, 0xc6, 0x2c, 0xe9, 0x89, 0x3f,
	0x1c, 0x87, 0xd0, 0xcb, 0xd2, 0x9a, 0x07, 0xde, 0xdb, 0x63, 0xdb, 0x49, 0xd5, 0x8b, 0xf2, 0x6e,
	0x39, 0xa9, 0x2a, 0x31, 0x02, 0x48, 0x49, 0x3d, 0x0b, 0xca, 0xad, 0x56, 0xbc, 0xe7, 0x9b, 0x35,
	0x72, 0xd9, 0x7f, 0xdb, 0x44, 0xec, 0x7d, 0x13, 0xb1, 0x8f, 0x4d, 0xc4, 0x5e, 0x3f, 0xa3, 0x7f,
	0xb3, 0x96, 0xff, 0xaf, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x40, 0xe2, 0x2a, 0xcf,
	0x01, 0x00, 0x00,
}
